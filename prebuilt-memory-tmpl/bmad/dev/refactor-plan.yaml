template:
  id: "bmad.dev.refactor-plan.v1"
  name: "Developer â€” Refactor Plan"
sections:
  - id: "refactor_motivation"
    title: "Refactor Motivation"
    description: "Why refactoring is needed. Example: 'TaskService has grown to 1500 lines. Hard to test. Business logic mixed with data access. Adding features is slow and risky.'"
  - id: "current_state"
    title: "Current State Analysis"
    description: "Description of code being refactored. Example: 'TaskService handles: CRUD operations, validation, permissions, notifications, analytics. Tightly coupled to Express req/res. No dependency injection.'"
  - id: "refactor_goals"
    title: "Refactor Goals"
    description: "What refactoring should achieve. Example: 'Separate concerns (service/repository pattern), improve testability, enable reuse, reduce coupling, make it easier to add features.'"
  - id: "proposed_structure"
    title: "Proposed Structure"
    description: "New architecture or organization. Example: 'Split into: TaskRepository (data access), TaskService (business logic), TaskValidator (validation), TaskNotifier (notifications). Use dependency injection.'"
  - id: "migration_strategy"
    title: "Migration Strategy"
    description: "How to refactor safely. Example: 'Incremental approach: 1. Add new structure alongside old, 2. Migrate one feature at a time, 3. Keep tests passing, 4. Remove old code last. Feature flags for rollback.'"
  - id: "testing_strategy"
    title: "Testing Strategy"
    description: "How to ensure refactor doesn't break things. Example: 'Maintain 100% test coverage during refactor. Add integration tests first. Unit test new modules. Run full regression suite after each step.'"
  - id: "risks"
    title: "Risks & Mitigation"
    description: "Potential issues and how to handle. Example: 'Risk: introduce bugs. Mitigation: incremental changes, thorough testing. Risk: scope creep. Mitigation: strict focus on structure, no feature changes.'"
  - id: "timeline"
    title: "Timeline & Milestones"
    description: "Estimated effort and checkpoints. Example: 'Week 1: Create new structure + tests. Week 2: Migrate read operations. Week 3: Migrate write operations. Week 4: Remove old code, cleanup.'"
metadata:
  usage: "refactoring"
  priority: "medium"
  workflow: "code-improvement"
