template:
  id: "bmad.dev.technical-spike.v1"
  name: "Developer â€” Technical Spike"
sections:
  - id: "spike_objective"
    title: "Spike Objective"
    description: "What question needs answering. Example: 'Investigate whether PostgreSQL full-text search is sufficient for our needs vs. integrating Elasticsearch. Decide by end of week.'"
  - id: "context"
    title: "Context & Background"
    description: "Why this investigation is needed. Example: 'Current search is slow with 1M+ records. Users want fuzzy matching and relevance ranking. Need to decide on solution before Q2 planning.'"
  - id: "approach"
    title: "Investigation Approach"
    description: "How the spike will be conducted. Example: 'Test PostgreSQL full-text with production data. Prototype Elasticsearch integration. Compare performance, relevance, complexity, and cost.'"
  - id: "findings"
    title: "Findings & Results"
    description: "What was discovered. Example: 'PostgreSQL FTS: 200ms avg query time, basic relevance, no operational overhead. Elasticsearch: 50ms avg, excellent relevance, requires new infrastructure.'"
  - id: "performance_data"
    title: "Performance Data"
    description: "Benchmarks and metrics collected. Example: 'PostgreSQL: 200ms (simple), 800ms (complex). Elasticsearch: 50ms (simple), 150ms (complex). Index size: PG 2GB, ES 3GB. Setup time: PG 1 day, ES 1 week.'"
  - id: "pros_cons"
    title: "Pros & Cons Analysis"
    description: "Compare options. Example: 'PostgreSQL pros: simple, no new infra, good enough. Cons: slower, basic features. Elasticsearch pros: fast, great features. Cons: complex, costly, operational burden.'"
  - id: "recommendation"
    title: "Recommendation"
    description: "Suggested path forward with reasoning. Example: 'Recommend PostgreSQL FTS. Performance is acceptable (<500ms). Simpler to maintain. Can migrate to ES later if needed. Focus effort on features, not infrastructure.'"
  - id: "follow_up"
    title: "Follow-up Actions"
    description: "Next steps based on findings. Example: 'Implement PostgreSQL FTS with ts_vector. Add GIN index. Optimize query. Document decision. Monitor performance in production. Revisit if scale 10x.'"
metadata:
  usage: "investigation"
  priority: "medium"
  workflow: "research"
