template:
  id: "bmad.dev.debug-session.v1"
  name: "Developer â€” Debug Session"
sections:
  - id: "bug_description"
    title: "Bug Description"
    description: "What's broken and how it manifests. Example: 'Users report tasks disappearing after page refresh. Occurs intermittently, ~20% of the time. Reproduced in production and staging.'"
  - id: "reproduction_steps"
    title: "Reproduction Steps"
    description: "How to reproduce the bug. Example: '1. Create new task, 2. Add description and assignee, 3. Save task, 4. Refresh page within 5 seconds, 5. Task is missing from list.'"
  - id: "investigation_process"
    title: "Investigation Process"
    description: "How the bug was investigated. Example: 'Checked browser console (no errors), reviewed server logs (found 500 errors), added debug logging, reproduced locally, analyzed database state.'"
  - id: "root_cause"
    title: "Root Cause"
    description: "What's causing the bug. Example: 'Race condition: frontend saves task and immediately fetches list. Backend save is async and not complete yet. List fetch returns old data without new task.'"
  - id: "fix_implemented"
    title: "Fix Implemented"
    description: "How the bug was fixed. Example: 'Changed POST /tasks to return the created task. Frontend optimistically adds task to list immediately. If save fails, rollback and show error.'"
  - id: "verification"
    title: "Verification & Testing"
    description: "How fix was validated. Example: 'Tested: original reproduction steps, rapid creation of multiple tasks, network latency simulation. Added regression test. Deployed to staging, verified with 20+ test cases.'"
  - id: "related_issues"
    title: "Related Issues"
    description: "Other bugs or improvements identified. Example: 'Similar pattern in DELETE endpoint. Could affect comments feature. Should audit all async operations for race conditions.'"
  - id: "lessons_learned"
    title: "Lessons Learned"
    description: "Insights from debugging. Example: 'Need to handle async operations consistently. Optimistic UI updates improve UX. Should add e2e tests for critical flows. Consider adding request IDs for tracing.'"
metadata:
  usage: "debugging"
  priority: "high"
  workflow: "troubleshooting"
