template:
  id: "bmad.architect.tech-stack-decision.v1"
  name: "Architect â€” Tech Stack Decision"
sections:
  - id: "decision_context"
    title: "Decision Context"
    description: "Why this decision is needed. Example: 'Selecting backend framework for new microservice. Current services use Node.js but team has Python expertise. Need to standardize.'"
  - id: "requirements"
    title: "Requirements & Constraints"
    description: "What the technology must support. Example: 'Must handle 1K req/sec, integrate with existing PostgreSQL, support async processing, team productive in <2 weeks, mature ecosystem.'"
  - id: "options_evaluated"
    title: "Options Evaluated"
    description: "Technologies considered with brief description. Example: 'Option A: Node.js/Express (current standard), Option B: Python/FastAPI (team expertise), Option C: Go (performance).'"
  - id: "evaluation_criteria"
    title: "Evaluation Criteria"
    description: "How options were assessed. Example: 'Performance, developer productivity, ecosystem maturity, team expertise, hiring market, operational complexity, cost.'"
  - id: "comparison"
    title: "Detailed Comparison"
    description: "Compare options against criteria. Example: 'Node.js: mature, good performance, consistent with other services. Python: team expertise, great for ML integration, slower. Go: fastest, harder to hire.'"
  - id: "recommendation"
    title: "Recommendation & Rationale"
    description: "Chosen option and why. Example: 'Recommend Python/FastAPI. Team productivity outweighs performance difference. Performance is adequate. Enables ML features. Can optimize later if needed.'"
  - id: "implementation_plan"
    title: "Implementation Plan"
    description: "How to adopt the decision. Example: 'Create service template with FastAPI, establish code standards, set up CI/CD, train team on async patterns, migrate one low-risk service first.'"
  - id: "risks_and_mitigation"
    title: "Risks & Mitigation"
    description: "Potential issues and how to address them. Example: 'Risk: performance bottleneck. Mitigation: benchmark early, use Cython for hot paths. Risk: inconsistent stack. Mitigation: clear guidelines on when to use each.'"
metadata:
  usage: "decision"
  priority: "high"
  workflow: "technology-selection"
