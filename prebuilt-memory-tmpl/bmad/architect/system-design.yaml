template:
  id: "bmad.architect.system-design.v1"
  name: "Architect — System Design"
sections:
  - id: "requirements_overview"
    title: "Requirements Overview"
    description: "High-level functional and non-functional requirements. Example: 'Real-time collaboration system for 10K concurrent users. <100ms latency, 99.9% uptime, mobile support required.'"
  - id: "architecture_goals"
    title: "Architecture Goals"
    description: "What the architecture aims to achieve. Example: 'Scalability to 100K users, support multi-region deployment, enable independent team development, minimize vendor lock-in.'"
  - id: "system_overview"
    title: "System Overview"
    description: "High-level architecture description. Example: 'Event-driven microservices architecture. React SPA frontend, Node.js API gateway, Python/Go services, PostgreSQL + Redis, deployed on Kubernetes.'"
  - id: "components"
    title: "Key Components"
    description: "Major system components and their responsibilities. Example: 'API Gateway (routing, auth), User Service (profiles, auth), Collaboration Service (real-time sync), Storage Service (files).'"
  - id: "data_flow"
    title: "Data Flow"
    description: "How data moves through the system. Example: 'User action → WebSocket → API Gateway → Event Bus (Kafka) → Service → Database → Event Bus → Real-time sync to clients.'"
  - id: "technology_stack"
    title: "Technology Stack"
    description: "Technologies chosen and why. Example: 'Frontend: React (ecosystem), Backend: Node.js (real-time), Database: PostgreSQL (ACID), Cache: Redis, Message Queue: Kafka (scale).'"
  - id: "scalability_strategy"
    title: "Scalability Strategy"
    description: "How system will scale. Example: 'Horizontal scaling of stateless services. Database read replicas. CDN for static assets. Redis for session state. Event-driven async processing.'"
  - id: "security_considerations"
    title: "Security Considerations"
    description: "Security measures and concerns. Example: 'OAuth2 + JWT for auth. API rate limiting. Input validation. Encrypted data at rest and in transit. RBAC for access control.'"
  - id: "trade_offs"
    title: "Trade-offs & Decisions"
    description: "Key decisions and their rationale. Example: 'Chose eventual consistency over strong consistency for better performance. Microservices over monolith for team autonomy despite complexity.'"
metadata:
  usage: "design"
  priority: "high"
  workflow: "architecture"
